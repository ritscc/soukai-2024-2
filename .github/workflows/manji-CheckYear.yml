name: manji-CheckYear

on:
  pull_request:
    types: [opened, synchronize]
    paths: '**.tex'

jobs:
  check_year:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extracting modified .tex files
        id: changed-files
        run: |
          FILES=$(git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --diff-filter=AM --name-only -- '*.tex')
          echo "対象ファイル: $FILES"
          echo "files=$FILES" >> $GITHUB_OUTPUT

      - name: Year check
        id: year-check
        shell: bash
        run: |
          # リポジトリ名から対象の年とバッチ番号を抽出
          REPO_FULL="${{ github.repository }}"
          REPO_NAME="${REPO_FULL#*/}"
          echo "リポジトリ名: $REPO_NAME"
          
          if [[ "$REPO_NAME" =~ ^soukai-([0-9]{4})-([12])$ ]]; then
            YEAR="${BASH_REMATCH[1]}"
            BATCH="${BASH_REMATCH[2]}"
            echo "抽出された年: $YEAR, バッチ: $BATCH"
          else
            echo "リポジトリ名が予期した形式に一致しません。例: soukai-<year>-<1 or 2>"
            {
              echo "message=リポジトリ名の形式が正しくありません: $REPO_NAME"
              echo "failed=false"
            } >> $GITHUB_OUTPUT
            exit 0
          fi

          # バッチ番号が 1 の場合は許容される年は YEAR のみ。2 の場合は YEAR および (YEAR+1)
          if [ "$BATCH" -eq 1 ]; then
            ALLOWED_YEARS=("$YEAR")
          else
            NEXT_YEAR=$((YEAR + 1))
            ALLOWED_YEARS=("$YEAR" "$NEXT_YEAR")
          fi
          ALLOWED_LIST=$(IFS=", "; echo "${ALLOWED_YEARS[*]}")
          echo "許容される年: $ALLOWED_LIST"

          # 変更されたファイルの一覧を取得
          FILES="${{ steps.changed-files.outputs.files }}"
          if [ -z "$FILES" ]; then
            echo "変更された .tex ファイルはありません。"
            {
              echo "message=変更された .tex ファイルはありませんでした。"
              echo "failed=false"
            } >> $GITHUB_OUTPUT
            exit 0
          fi

          PROBLEM_FILES=()

          # 各ファイル内で年のチェックを実施
          for file in $FILES; do
            if [ ! -f "$file" ]; then
              echo "ファイル $file が存在しません。スキップします。"
              continue
            fi
            echo "チェック中のファイル: $file"
            FILE_HAS_ERROR=0
            while IFS= read -r line; do
              for num in $(echo "$line" | grep -oE '[0-9]{4}'); do
                ALLOWED=0
                for ay in "${ALLOWED_YEARS[@]}"; do
                  if [ "$num" = "$ay" ]; then
                    ALLOWED=1
                    break
                  fi
                done
                if [ $ALLOWED -eq 0 ]; then
                  FILE_HAS_ERROR=1
                  break 2
                fi
              done
            done < <(grep -nE '[0-9]{4}' "$file" || true)
            if [ $FILE_HAS_ERROR -eq 1 ]; then
              PROBLEM_FILES+=("$file")
            fi
          done

          # エラーがあった場合、レポートを作成（実際の改行文字を利用）
          if [ ${#PROBLEM_FILES[@]} -gt 0 ]; then
            REPORT="以下のファイルに ${ALLOWED_LIST} 以外の年数がありました．
もし使用したい場合は \"n年前\" といった表記にしてください

"
            for f in "${PROBLEM_FILES[@]}"; do
              REPORT+="- $f
"
            done
            echo "$REPORT"
            {
              echo "message<<EOF"
              echo "$REPORT"
              echo "EOF"
              echo "failed=true"
            } >> $GITHUB_OUTPUT
          else
            echo "全ての年チェックにPassed!"
            {
              echo "message=全ての年チェックにPassed!"
              echo "failed=false"
            } >> $GITHUB_OUTPUT
          fi

      - name: Comment to PR (Year Check)
        uses: marocchino/sticky-pull-request-comment@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: "[Year Check]"
          message: ${{ steps.year-check.outputs.message }}

      - name: Fail job if error detected
        if: steps.year-check.outputs.failed == 'true'
        run: |
          echo "年チェックで問題が検出されました。CI をエラー終了します。"
          exit 1
